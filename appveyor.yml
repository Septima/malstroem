# Based on the numpy appveyor setup https://github.com/MacPython/numpy-wheels/blob/master/.appveyor.yml
clone_depth: 50

# No reason for us to restrict the number concurrent jobs
max_jobs: 100

cache:
  - '%LOCALAPPDATA%\pip\Cache'

environment:
  global:
      MINGW_32: C:\mingw-w64\i686-6.3.0-posix-dwarf-rt_v5-rev1\mingw32\bin
      MINGW_64: C:\mingw-w64\x86_64-6.3.0-posix-seh-rt_v5-rev1\mingw64\bin
      CYTHON_BUILD_DEP: Cython
      TEST_MODE: fast
      APPVEYOR_SAVE_CACHE_ON_ERROR: true
      APPVEYOR_SKIP_FINALIZE_ON_EXIT: true
      #WHEELHOUSE_UPLOADER_USERNAME: travis-worker
      #WHEELHOUSE_UPLOADER_SECRET:
      #  secure:
      #      9s0gdDGnNnTt7hvyNpn0/ZzOMGPdwPp2SewFTfGzYk7uI+rdAN9rFq2D1gAP4NQh
      #BUILD_COMMIT: master
      #DAILY_COMMIT: master

  matrix:
    - PYTHON: C:\Python37
      PYTHON_VERSION: 3.7
      PYTHON_ARCH: 32
      GDAL_WHEEL: https://github.com/AsgerPetersen/gdalwheels/releases/download/2.3.3_1/GDAL-2.3.3-cp37-cp37m-win32.whl

    - PYTHON: C:\Python37-x64
      PYTHON_VERSION: 3.7
      PYTHON_ARCH: 64
      GDAL_WHEEL: https://github.com/AsgerPetersen/gdalwheels/releases/download/2.3.3_1/GDAL-2.3.3-cp37-cp37m-win_amd64.whl

    - PYTHON: C:\Python36
      PYTHON_VERSION: 3.6
      PYTHON_ARCH: 32
      GDAL_WHEEL: https://github.com/AsgerPetersen/gdalwheels/releases/download/2.3.3_1/GDAL-2.3.3-cp36-cp36m-win32.whl

    - PYTHON: C:\Python36-x64
      PYTHON_VERSION: 3.6
      PYTHON_ARCH: 64
      GDAL_WHEEL: https://github.com/AsgerPetersen/gdalwheels/releases/download/2.3.3_1/GDAL-2.3.3-cp36-cp36m-win_amd64.whl

init:
  - "ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH%"
  - "ECHO \"%APPVEYOR_SCHEDULED_BUILD%\""
  - ps: >-
      if ($env:APPVEYOR_REPO_BRANCH -eq "master") {
        $env:CONTAINER = "pre-release"
        if ($env:DAILY_COMMIT) { $env:BUILD_COMMIT = $env:DAILY_COMMIT }
        $env:NPY_RELAXED_STRIDES_DEBUG = 1
      } else {
        $env:CONTAINER = "wheels"
        $env:UPLOAD_ARGS = "--no-update-index"
      }
  - ps: |
      function exec
      {
        param ( [ScriptBlock] $ScriptBlock )
        & $ScriptBlock 2>&1 | ForEach-Object -Process { "$_" }
        if ($LastExitCode -ne 0) { exit $LastExitCode }
      }
install:
  - cmd: echo "Filesystem root:"
  - dir C:\

  - echo "Installed SDKs:"
  - dir "C:/Program Files/Microsoft SDKs/Windows"


  # Install new Python if necessary
  #- ps: .\multibuild\install_python.ps1

  # Prepend required Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%

  # Check that we have the expected version and architecture for Python
  - python --version
  - >-
     python -c "import sys,platform,struct;
     print(sys.platform, platform.machine(), struct.calcsize('P') * 8, )"

  # Upgrade to the latest pip, setuptools, and wheel.
  - python -m pip install -U pip setuptools wheel

  # Install build requirements.
  - pip install "%CYTHON_BUILD_DEP%" --install-option="--no-cython-compile"
  - pip install numpy
  - pip install %GDAL_WHEEL%
  - pip install -r requirements-dev.txt

build_script:
  #- cd numpy
  #- git checkout %BUILD_COMMIT%
  # Append license text relevant for the built wheel
  #- type ..\LICENSE_win32.txt >> LICENSE.txt
  - ps: |
      $PYTHON_ARCH = $env:PYTHON_ARCH
      If ($PYTHON_ARCH -eq 32) {
          $MINGW = $env:MINGW_32
      } Else {
          $MINGW = $env:MINGW_64
      }
      $env:Path += ";$MINGW"
      $env:NPY_NUM_BUILD_JOBS = "4"
  # Only build pyinstaller exe for py37 x64. Use build_ext --inplace otherwise pyinstaller does not pick up libraries
  - ps: |
      if($env:PYTHON -eq "C:\Python37-x64")
      {
        exec { python setup.py build_ext --inplace }
        exec { pyinstaller malstroem.spec }
        # Upload artifact to Appveyor immediately after build
        ls dist -r | Foreach-Object {
          exec { appveyor PushArtifact $_.FullName }
        }
      }
  - python setup.py bdist_wheel
  - ps: |
      # Upload artifact to Appveyor immediately after build
      ls dist -r *.whl | Foreach-Object {
        exec { pip install $_.FullName }
        exec { appveyor PushArtifact $_.FullName }
      }



test_script:
  - pip install pytest
  - pytest

after_test:
  # Upload test results to Appveyor
  - ps: |
      If (Test-Path .\junit-results.xml) {
        (new-object net.webclient).UploadFile(
          "https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)",
          (Resolve-Path .\junit-results.xml)
        )
      }
      $LastExitCode = 0
  # Remove old or huge cache files to hopefully not exceed the 1GB cache limit.
  #
  # If the cache limit is reached, the cache will not be updated (of not even
  # created in the first run). So this is a trade of between keeping the cache
  # current and having a cache at all.
  # NB: This is done only `on_success` since the cache in uploaded only on
  # success anyway.
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -type f -mtime +360 -delete
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -type f -size +10M -delete
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -empty -delete
  # Show size of cache
  - C:\cygwin\bin\du -hs "%LOCALAPPDATA%\pip\Cache"

on_success:
  # Upload the generated wheel package to Rackspace
  #- cd numpy
  #- pip install wheelhouse-uploader certifi
  #- python -m wheelhouse_uploader upload
  #  --local-folder=dist
  #  %UPLOAD_ARGS%
  #  %CONTAINER%